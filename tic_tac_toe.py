# -*- coding: utf-8 -*-
"""Tic-Tac-Toe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hrv7E2CH6Gq0zHhNWcVMtQEFZgd1JDoP
"""

import time

def print_board(board):
    print("\n   0    1    2")
    for i, row in enumerate(board):
        print(i, "  || ".join(row))
        if i < 2:
            print("  .............")
    print()

def check_winner(board, player):
    # Rows, columns, diagonals
    win_states = (
        [row for row in board] +
        [[board[i][j] for i in range(3)] for j in range(3)] +
        [[board[i][i] for i in range(3)]] +
        [[board[i][2 - i] for i in range(3)]]
    )
    return [player] * 3 in win_states

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, is_maximizing, player, opponent):
    if check_winner(board, player):
        return 1
    if check_winner(board, opponent):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best = -float('inf')
        for i, j in get_available_moves(board):
            board[i][j] = player
            val = minimax(board, False, player, opponent)
            board[i][j] = ' '
            best = max(best, val)
        return best
    else:
        best = float('inf')
        for i, j in get_available_moves(board):
            board[i][j] = opponent
            val = minimax(board, True, player, opponent)
            board[i][j] = ' '
            best = min(best, val)
        return best

def alphabeta(board, alpha, beta, is_maximizing, player, opponent):
    if check_winner(board, player):
        return 1
    if check_winner(board, opponent):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best = -float('inf')
        for i, j in get_available_moves(board):
            board[i][j] = player
            val = alphabeta(board, alpha, beta, False, player, opponent)
            board[i][j] = ' '
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best
    else:
        best = float('inf')
        for i, j in get_available_moves(board):
            board[i][j] = opponent
            val = alphabeta(board, alpha, beta, True, player, opponent)
            board[i][j] = ' '
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best

def best_move(board, player, use_pruning=False):
    opponent = 'O' if player == 'X' else 'X'
    best_val = -float('inf')
    move = None

    for i, j in get_available_moves(board):
        board[i][j] = player
        if use_pruning:
            val = alphabeta(board, -float('inf'), float('inf'), False, player, opponent)
        else:
            val = minimax(board, False, player, opponent)
        board[i][j] = ' '
        if val > best_val:
            best_val = val
            move = (i, j)
    return move

def play_game():
    print("Tic Tac Tow Implementation")
    print("You: 'o'\nAI: 'X'")
    algo_choice = input("Play with Alpha-Beta Pruning? (Yes(y)/No(n)): ").strip().lower()
    use_pruning = algo_choice == 'y'

    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'O'  # Human starts first

    print_board(board)

    while True:
        if current_player == 'O':
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))
                if board[row][col] != ' ':
                    print("Cell already taken. Try again.")
                    continue
            except (ValueError, IndexError):
                print("Invalid input. Try again.")
                continue
        else:
            print("AI is thinking...")
            start = time.time()
            move = best_move(board, 'X', use_pruning=use_pruning)
            end = time.time()
            print(f"AI chose: {move} \nTime Taken for selection: {end - start:.5f}s")
            row, col = move

        board[row][col] = current_player
        print_board(board)

        if check_winner(board, current_player):
            print(f"Player '{current_player}' wins!")
            break
        elif is_full(board):
            print("Match draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_game()

